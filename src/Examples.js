// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';


var variant = "type animal =\n  | Cat\n  | Dog\n  | Horse\n  | ThreeHeadedMonkey;\n\nlet favoriteAnimal = ThreeHeadedMonkey;\n  ";

var variantWithData = "type shape =\n  | Rectangle(int)\n  | Square(int)\n  | Circle(int);\n\nlet userShape = Rectangle(5);\n\ntype option(\'a) = Some(\'a) | None;\n  ";

var treeVariant = "type binaryTree =\n  | Leaf(int)\n  | Tree(binaryTree, binaryTree);\n\nlet myTree = Tree(\n  Leaf(5),\n  Tree(\n    Leaf(2),\n    Leaf(53)\n  )\n);\n  ";

var pattern = "let food = (animal) =>\n  switch (animal) {\n  | Cat => \"Fish\";\n  | Dog => \"Steak\";\n  | Horse => \"Good ol\' grass\"\n  | ThreeHeadedMonkey => \"Three bananas\";\n  };\n\nJs.log(food(favoriteAnimal));\n/* \"Three bananas\" */\n";

var patternInt = "let someNumber = 4;\n\nlet magicNumber = (n) =>\n  switch (n) {\n  | 8 => true\n  | _ => false;\n  };\n\nJs.log(magicNumber(someNumber));\n/* 0 */";

var tuples = "type position = (float, float);\n\nlet newYork = (40.712775, -73.989308);\nlet barcelona = (41.385063, 2.173403);\n";

var records = "type position = {\n  latitude: float,\n  longitude: float,\n};\n\nlet newYork = {\n  latitude: 40.7127753,\n  longitude: -73.989308\n};\nlet barcelona = {\n  latitude: 41.3850639,\n  longitude: 2.1734035\n};\nlet lat = barcelona.latitude;\nlet {latitude} = barcelona;\n";

var tuplesOutput = "var newYork = /* tuple */[\n  40.7127753,\n  -73.989308\n];\n\nvar barcelona = /* tuple */[\n  41.3850639,\n  2.1734035\n];\n";

var recordsOutput = "var newYork = /* float array */[\n  40.7127753,\n  -73.989308\n];\n\nvar barcelona = /* float array */[\n  41.3850639,\n  2.1734035\n];\n";

var listAndArray = "/* Lists */\nlet games: list(string) =\n  [\"Mario\", \"Donkey Kong\"];\n\nlet latestGames = [\"Zelda BotW\", ...games];\n\n/* Arrays */\nlet characters: array(string) =\n  [|\"Cloud\", \"Barrett\", \"Tifa\"|];\n\nlet first = characters[0];\n";

var functions = "type position = {\n  latitude: float,\n  longitude: float,\n};\n\nlet getLatitude = (position) => position.latitude;\n  ";

var functionsTwo = "let greetTwoPeople = (~first, ~second) => {\n  let part1 = \"Hello \";\n  first ++ \" and \" ++ second\n};";

var outputFunction = "function greetTwoPeople(first, second) {\n  return \"Hello \" + (first + (\" and \" + second));\n}";

var modules = "module BikeRental = {\n  type bike = Kid | Mountain | City;\n\n  let bikes = [];\n  let getModelPrice = (bike) =>\n    switch (bike) {\n      | Kid => 123.0\n      | Mountain => 250.0\n      | City => 142.0\n};";

var modulesFiles = "/* In BikeRental.re */\ntype bike = Kid | Mountain | City;\n\nlet bikes = [];\nlet getModelPrice = (bike) =>\n  switch (bike) {\n    | Kid => 123.0\n    | Mountain => 250.0\n    | City => 142.0\n  };";

var interop = "[%%bs.raw {|console.log(\'can inline javascript\');|}];\n\nlet x: string = [%bs.raw {| \'well-typed\' |}];\n\n[@bs.val] external pi : float = \"Math.PI\";\nJs.log(pi); /* console.log(Math.PI) */\n\n[@bs.val] external random : unit => float = \"Math.random\";\nrandom(); /* Math.random() */\n";

var reasonReact = "let component = ReasonReact.statelessComponent(\"Greeting\");\nlet s = ReasonReact.stringToElement;\n\nlet make = (~name, _children) => {\n  ...component,\n  render: _self =>\n    <button>\n      {s(\"Hello \" ++ name ++ \"!\")}\n    </button>\n};";

var nativeCompilation = "#if BSB_BACKEND = \"bytecode\" then\n/* run my native code */\n#elif BSB_BACKEND = \"native\" then\n/* run my native code */\n#else\n/* run my JavaScript code */\n#end";

exports.variant = variant;
exports.variantWithData = variantWithData;
exports.treeVariant = treeVariant;
exports.pattern = pattern;
exports.patternInt = patternInt;
exports.tuples = tuples;
exports.records = records;
exports.tuplesOutput = tuplesOutput;
exports.recordsOutput = recordsOutput;
exports.listAndArray = listAndArray;
exports.functions = functions;
exports.functionsTwo = functionsTwo;
exports.outputFunction = outputFunction;
exports.modules = modules;
exports.modulesFiles = modulesFiles;
exports.interop = interop;
exports.reasonReact = reasonReact;
exports.nativeCompilation = nativeCompilation;
/* No side effect */
